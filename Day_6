https://leetcode.com/problems/reverse-linked-list/

ListNode* reverseList(ListNode* head) {
      ListNode* prevptr=NULL;
      ListNode* currptr=head;
      ListNode* nextptr;
      while(currptr!=NULL){
          nextptr=currptr->next;
          currptr->next=prevptr;
          prevptr=currptr;
          currptr=nextptr;
      }
      return prevptr;
  }
  
https://leetcode.com/problems/delete-node-in-a-linked-list/

void deleteNode(ListNode* node) {
      node->val = node->next->val;
      ListNode *toDelete = node->next;
      node->next = node->next->next;
      delete (toDelete);
  }
  
  https://leetcode.com/problems/middle-of-the-linked-list/
  
  ListNode* middleNode(ListNode* head) {
       ListNode* slow=head;
       ListNode* fast=head;
       while(fast!=NULL && fast->next!=NULL){
           slow=slow->next;
           fast=fast->next->next;
       }
       return slow;
    }
    
    https://leetcode.com/problems/merge-two-sorted-lists/
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* p1=l1;
        ListNode* p2=l2;
        ListNode* dummy=new ListNode(-11);
        ListNode* p3=dummy;
        while(p1!=NULL && p2!=NULL){
            if(p1->val < p2->val){
                p3->next=p1;
                p1=p1->next;
            }
            else{
                p3->next=p2;
                p2=p2->next;
            }
            p3=p3->next;
        }
        while(p1!=NULL){
            p3->next=p1;
            p1=p1->next;
            p3=p3->next;
        }
        while(p2!=NULL){
            p3->next=p2;
            p2=p2->next;
            p3=p3->next;
        }
        return dummy->next;
    }

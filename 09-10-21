Q1) https://www.geeksforgeeks.org/allocate-minimum-number-pages/

class Solution 
{
    public:
    
    bool isValid(int limit, int arr[], int n, int k){
        int nos = 0, total = 0;
        for(int i=0;i<n;i++){
            if(arr[i]>limit) return false;
            if(total+arr[i] > limit){
                nos++;
                total = arr[i];
                if(total > limit) return false;
            }else{
                total+=arr[i];
            }
        }
        if(k>nos) return true;
        else return false;
    }
    //Function to find minimum number of pages.
    int findPages(int arr[], int n, int m) 
    {
        if(m > n) return -1; 
        int low = arr[0]; 
        int high = 0;
        for(int i = 0;i<n;i++) {
            high = high + arr[i]; 
            low = min(low, arr[i]); 
        }
        int ans = -1;
        while(low<=high){
            int mid = (low+high)/2;
            if(isValid(mid,arr,n,m)){
                ans = mid;
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return ans;
    }
};




Q2) https://leetcode.com/problems/capacity-to-ship-packages-within-d-days


class Solution {
public:
    int shipWithinDays(vector<int>& weights, int D) {
        int left = 0, right = 25000000;
        for (int w: weights)
            left = max(left, w);
        while (left < right) {
            int mid = (left + right) / 2, need = 1, cur = 0;
            for (int i = 0; i < weights.size() && need <= D; cur += weights[i++])
                if (cur + weights[i] > mid)
                    cur = 0, need++;
            if (need > D) left = mid + 1;
            else right = mid;
        }
        return left;
    }
};


Q3) https://leetcode.com/problems/split-array-largest-sum



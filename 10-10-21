Q1) https://practice.geeksforgeeks.org/problems/subset-sums2234/1

class Solution
{
public:


    void sums(int idx, int sum, int n, vector<int> &arr, vector<int> &ans){
        if(idx==n){
            ans.push_back(sum);
            return;
        }
        sums(idx+1, sum+arr[idx], n, arr, ans);
        sums(idx+1, sum, n, arr, ans);
    }
    vector<int> subsetSums(vector<int> arr, int N)
    {
        // Write Your Code here
        vector<int> ans;
        sums(0,0,N,arr,ans);
        sort(ans.begin(), ans.end());
        return ans;
    }
};


Q2) https://leetcode.com/problems/subsets-ii/

class Solution {
    
public:
    std::vector<std::vector<int> > subsetsWithDup(std::vector<int> &nums) {
		std::sort(nums.begin(), nums.end());
        std::vector<std::vector<int> > res;
		std::vector<int> vec;
		subsetsWithDup(res, nums, vec, 0);
		return res;
    }
private:
	void subsetsWithDup(std::vector<std::vector<int> > &res, std::vector<int> &nums, std::vector<int> &vec, int begin) {
		res.push_back(vec);
		for (int i = begin; i != nums.size(); ++i)
			if (i == begin || nums[i] != nums[i - 1]) { 
				vec.push_back(nums[i]);
				subsetsWithDup(res, nums, vec, i + 1);
				vec.pop_back();
			}
	}
};


Q3) https://leetcode.com/problems/combination-sum/

class Solution {
public:
    
    void comb(int idx,int target,vector<int>&arr,vector<vector<int>> &ans,vector<int> &v){
        if(idx==arr.size()){
            if(target==0) ans.push_back(v);
            return;
        }
        if(arr[idx]<=target){
            v.push_back(arr[idx]);
            comb(idx,target-arr[idx],arr,ans,v);
            v.pop_back();
        }
        comb(idx+1,target,arr,ans,v);
    }
    
    vector<vector<int>> combinationSum(vector<int>& arr, int target) {
        vector<vector<int>> ans;
        vector<int> v;
        comb(0,target,arr,ans,v);
        return ans;
        
    }
};

Q4) https://leetcode.com/problems/combination-sum-ii/




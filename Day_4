Q1) https://leetcode.com/problems/asteroid-collision/

vector<int> asteroidCollision(vector<int>& ast) {
    int n = ast.size();
    stack<int> s;
    for(int i = 0; i < n; i++) {
        if(ast[i] > 0 || s.empty()) {
            s.push(ast[i]);
        }
        else {
            while(!s.empty() and s.top() > 0 and s.top() < abs(ast[i])) {
                s.pop();
            }
            if(!s.empty() and s.top() == abs(ast[i])) {
                s.pop();
            }
            else {
                if(s.empty() || s.top() < 0) {
                    s.push(ast[i]);
                }
            }
        }
    }
    vector<int> ans;
    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }
    reverse(ans.begin(),ans.end());
    return ans;
}

Q2) https://practice.geeksforgeeks.org/problems/circular-tour/1

int tour(petrolPump p[],int n)
{
   int ans = 0, req = 0, ext = 0;
   for(int i=0;i<n;i++){
       ext += p[i].petrol - p[i].distance;
       if(ext<0){
           ans = i+1;
           req += ext;
           ext = 0;
       }
   }
   if(req+ext >=0) return ans;
   return -1;
}

Q3) https://leetcode.com/problems/add-two-numbers-ii/

vector<int> nums1, nums2;
while(l1) {
    nums1.push_back(l1->val);
    l1 = l1->next;
}
while(l2) {
    nums2.push_back(l2->val);
    l2 = l2->next;
}

int m = nums1.size(), n = nums2.size();
int sum = 0, carry = 0;

ListNode *head = nullptr, *p = nullptr;

for(int i = m - 1, j = n - 1; i >= 0 || j >= 0 || carry > 0; i--, j--) {
    sum = carry;
    if(i >= 0) 
        sum += nums1[i];

    if(j >= 0)
        sum += nums2[j];

    carry = sum / 10;

    p = new ListNode(sum%10);
    p->next = head;
    head = p;
}

return head;



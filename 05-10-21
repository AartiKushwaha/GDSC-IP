Q1) https://leetcode.com/problems/intersection-of-two-linked-lists/

ListNode *getIntersectionNode(ListNode *ha, ListNode *hb) {
        if(ha==NULL or hb==NULL) return NULL;
        ListNode *d1 = ha;
        ListNode *d2 = hb;
        while(d1!=d2){
            while(d1!=NULL and d2!=NULL){
                if(d1==d2) return d1;
                d1 = d1->next;
                d2 = d2->next;
            }
            if(d1!=d2){
                if(d1==NULL){
                    d1 = hb;
                }
                if(d2 == NULL){
                    d2 = ha;
                }
            }

        }
        return d1;
    }
    
Q2) https://www.interviewbit.com/problems/palindrome-list/

int Solution::lPalin(ListNode* head) {

        //to get middle node
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        //to reverse
        ListNode* prevptr=NULL;
        ListNode* currptr=slow;
        ListNode* nextptr;
        while(currptr!=NULL){
            nextptr=currptr->next;
            currptr->next=prevptr;
            prevptr=currptr;
            currptr=nextptr;
        }
        ListNode* hfl=prevptr;
        ListNode* hfb=head;
        while(hfl!=NULL){
            if(hfl->val!=hfb->val){
                return 0;
            }
            hfl=hfl->next;
            hfb=hfb->next;
        }
        return 1;
}

Q3) https://www.interviewbit.com/problems/swap-list-nodes-in-pairs/


ListNode* Solution::swapPairs(ListNode* head) {
    if(head==NULL) return NULL;
    if(head->next==NULL) return head;
    ListNode* first = head;
    ListNode* sec = head->next;
    ListNode* newNode = swapPairs(sec->next);
    sec->next=first;
    first->next=newNode;
    return sec;
}

Q4) https://leetcode.com/problems/odd-even-linked-list/


 ListNode* oddEvenList(ListNode* head) {
        if(head==NULL or head->next==NULL) return head;
        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenHead = head->next;
        while(even!=NULL and even->next!=NULL){
            odd->next = odd->next->next;
            even->next = even->next->next;
            odd = odd->next;
            even = even->next;
        }
        odd->next = evenHead;
        return head;
    }

Q1) https://leetcode.com/problems/balanced-binary-tree

class Solution {
public:
    
    bool isbal = true;
    int check(TreeNode* root){
        if(root==NULL) return 0;
        int lh = check(root->left);
        int rh = check(root->right);
        
        int diff = abs(lh-rh);
        if(diff>1) isbal = false;
        
        return max(lh,rh)+1;
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL) return true;
        check(root);
        return isbal;
    }
};

Q2) https://leetcode.com/problems/binary-tree-preorder-traversal

class Solution {
public:
    
    void preOrder(TreeNode* root, vector<int> &ans){
        if(root==NULL) return;
        ans.push_back(root->val);
        preOrder(root->left,ans);
        preOrder(root->right, ans);
        
    }
    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        preOrder(root,ans);
        return ans;
    }
};

Q3) https://leetcode.com/problems/binary-tree-postorder-traversal

class Solution {
public:
    
    vector<int> postorderTraversal(TreeNode* root) {
        if(root==NULL) return {};
        stack<pair<TreeNode*, int>> st;
        vector<int> ans;
        st.push({root,1});
        while(!st.empty()){
            if(st.top().second==1){
                st.top().second++;
                if(st.top().first->left){
                    st.push({st.top().first->left, 1});
                }
            }
            else if(st.top().second==2){
                
                st.top().second++;
                if(st.top().first->right){
                    st.push({st.top().first->right, 1});
                }
            }
            else{
                ans.push_back(st.top().first->val);
                st.pop();
            }
        }
        return ans;
    }
};


Q4) https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
       if(!root) return NULL;
       if(root->val==p->val or root->val==q->val) return root;
       TreeNode* l=lowestCommonAncestor(root->left,p,q);
       TreeNode* r=lowestCommonAncestor(root->right,p,q);
       if(l and r) return root;
       if(l) return l;
       else return r;
    }
};

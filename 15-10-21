Q1) https://leetcode.com/problems/validate-binary-search-tree

class Solution {
public:
    TreeNode* prev = NULL;
    bool isValidBST(TreeNode* root) {
        if(root==NULL) return true;
        if(!isValidBST(root->left)) return false;
        if(prev!=NULL and prev->val >= root->val) return false;
        prev = root;
        if(!isValidBST(root->right)) return false;
        
        return true;
    }
};

Q2) https://leetcode.com/problems/kth-smallest-element-in-a-bst/submissions/

class Solution {
public:
    
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *> st;
        TreeNode *node = root;
        while(node || !st.empty())
        {
            while(node)
            {
                st.push(node);
                node = node->left;
            }
            node = st.top();
            if(--k == 0)
                return node->val;
            st.pop();
            node = node->right;
        }
        return 0;
    }
};

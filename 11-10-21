Q1) https://leetcode.com/problems/binary-tree-inorder-traversal

class Solution {
public:

    vector<int> inorderTraversal(TreeNode* root) {
        if(root==NULL) return {};
        stack<pair<TreeNode*, int>> st;
        vector<int> ans;
        st.push({root,1});
        while(!st.empty()){
            if(st.top().second==1){
                st.top().second++;
                if(st.top().first->left){
                    st.push({st.top().first->left, 1});
                }
            }
            else if(st.top().second==2){
                ans.push_back(st.top().first->val);
                st.top().second++;
                if(st.top().first->right){
                    st.push({st.top().first->right, 1});
                }
            }
            else{
                st.pop();
            }
        }
        return ans;
    }
};


Q2) https://leetcode.com/problems/same-tree


class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p == NULL && q == NULL) return true;
        if(p == NULL || q == NULL) return false;
        
        if(p->val == q->val){
            bool lf = isSameTree(p->left, q->left);
            bool rt = isSameTree(p->right, q->right);
            if(lf && rt) return true;
            else return false;
        }
        return false;
        
    }
};

Q3) https://leetcode.com/problems/symmetric-tree

class Solution {
public:
    
    bool rec(TreeNode* left, TreeNode* right){
        if(left==NULL || right==NULL)
        return left==right;
        if(left->val!=right->val)
            return false;
        return rec(left->left, right->right) && rec(left->right, right->left);
    }
    bool isSymmetric(TreeNode* root) {
        return root==NULL || rec(root->left, root->right);
    }
};



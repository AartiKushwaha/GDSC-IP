Q1) https://practice.geeksforgeeks.org/problems/maximum-sum-bitonic-subsequence1857/1

int maxSumBS(int arr[] , int n )
{
    int max_sum = INT_MIN;
    int MSIBS[n], MSDBS[n];
    for (int i = 0; i < n; i++) {
        MSDBS[i] = arr[i];
        MSIBS[i] = arr[i];
    }
    for (int i = 1; i < n; i++)
        for (int j = 0; j < i; j++)
            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i])
                MSIBS[i] = MSIBS[j] + arr[i];
 
    // Compute MSDBS values from right to left
    for (int i = n - 2; i >= 0; i--)
        for (int j = n - 1; j > i; j--)
            if (arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i])
                MSDBS[i] = MSDBS[j] + arr[i];
 
    // Find the maximum value of MSIBS[i] + MSDBS[i] - arr[i]
    for (int i = 0; i < n; i++)
        max_sum = max(max_sum, (MSDBS[i] + MSIBS[i] - arr[i]));
 
    // return max sum of bi-tonic sub-sequence
    return max_sum;
}


Q2) https://leetcode.com/problems/letter-combinations-of-a-phone-number/

vector<string> codes = {".",".;", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    
    vector<string> finalAns;
    
    void printKPC(string ques, string asf){

//base case - reached size zero - now is the time to print answer so far

    if(ques.size() == 0){
        finalAns.push_back(asf);
        return;
    }
	
	//taking out the first character and sending the one character to the next level everytime
	
    string first = codes[ques[0] - '0'];
    for(auto c : first){
        printKPC(ques.substr(1), asf + c);
    }
}

    vector<string> letterCombinations(string digits) {
        if(digits.size() == 0){
            return {};
        }
        printKPC(digits, "");
        return finalAns;
        
    }

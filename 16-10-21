Q1) https://leetcode.com/problems/binary-tree-right-side-view/

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        if(root==NULL) return ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            for(int i=0;i<n;i++){
                TreeNode* node = q.front();
                q.pop();
                if(i==n-1) ans.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
        }
        return ans;
    }
};

Q2) https://leetcode.com/problems/two-sum-iv-input-is-a-bst/

class Solution {
public:
    
    void inOrder(TreeNode* root, vector<int> &in){
        if(root==NULL) return;
        inOrder(root->left, in);
        in.push_back(root->val);
        inOrder(root->right, in);
    }
    
    bool findTarget(TreeNode* root, int k) {
        vector<int> in;
        if(root==NULL) return false;
        inOrder(root, in);
        if(in.size()<2) return false;
        int l = 0, r = in.size() - 1;
        while(l<r){
            if(in[l]+in[r] == k) return true;
            else if(in[l]+in[r] < k) l++;
            else r--;
        }
        return false;
    }
};

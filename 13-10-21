Q1) https://leetcode.com/problems/minimum-absolute-difference-in-bst

class Solution {
public:
    void inOrder(TreeNode* root, vector<int> &pre){
        if(root==NULL) return;
        inOrder(root->left, pre);
        pre.push_back(root->val);
        inOrder(root->right, pre);
    }
    
    int getMinimumDifference(TreeNode* root) {
        vector<int> pre;
        inOrder(root, pre);
        int ans = INT_MAX;
        for(int i=0; i<pre.size()-1; i++){
            if(pre[i+1] - pre[i] < ans) ans = pre[i+1] - pre[i];
        }
        return ans;
    }
};


Q2) https://leetcode.com/problems/diameter-of-binary-tree

class Solution {
public:

    
    int diameterOfBinaryTree(TreeNode* root) {
        int d=0;
        rec(root, d);
        return d;
    }
    
    int rec(TreeNode* root, int &d) {
        if(root == NULL) return 0;
        int ld = rec(root->left, d);
        int rd = rec(root->right, d);
        d=max(d,ld+rd);
        return max(ld,rd)+1;
    }
};

Q3) https://leetcode.com/problems/binary-tree-level-order-traversal

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root==NULL) return {};
        vector<vector<int>> ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            vector<int> v;
            for(int i=0;i<size;i++){
                TreeNode* parent = q.front();
                q.pop();
                v.push_back(parent->val);
                if(parent->left) q.push(parent->left);
                if(parent->right) q.push(parent->right);
            }
            ans.push_back(v);
        }
        return ans;
    }
};

Q4) https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal



Q1) https://leetcode.com/problems/search-in-rotated-sorted-array/

int binarySearch(vector<int>& nums, int low, int high, int target)
{
    cout<<"Searching.... target with "<<low<<"->"<<high<<endl;

    while(low<=high)
    {
        int mid = low+(high-low)/2;

        if(target > nums[mid])
            low = mid+1;
        else if(target < nums[mid])
            high = mid-1;
        else
            return mid;
    }
    return -1;
}

int search(vector<int>& nums, int target)
{
    if(nums.size()==0 || (nums.size()==1 && nums[0]!=target))
        return -1;

    if(nums.size()==1 && nums[0]==target)
        return 0;

    if(nums[0] < nums[nums.size()-1])
    {
        return binarySearch(nums, 0, nums.size()-1, target);
    }
    else
    {
        int vSize = nums.size();

        int low = 0;
        int high = vSize-1;

        while(low < high-1)
        {
            cout<<"Searching.... Pivot"<<endl;

            int mid = low+(high-low)/2;

            if(nums[mid] > nums[high])
                low = mid;
            else if(nums[mid] < nums[low])
                high = mid;
            else
                break;
        }
        int pivot = high;

        cout << "Pivot : "<<pivot<<endl;

        if(nums[0] <= target && target <= nums[pivot-1])
            return binarySearch(nums, 0, pivot-1, target);
        else
            return binarySearch(nums, pivot, vSize-1, target);

    }
    return -1;
}


Q2) https://leetcode.com/problems/search-in-rotated-sorted-array-ii/


bool binarySearch(vector<int>& nums, int left, int right, int t){
    if(left > right) return false;
    int mid = (left+right)/2;
    if(nums[mid] == t) return true;
    if(nums[mid] > t) return binarySearch(nums, left, mid-1, t);
    if(nums[mid] < t) return binarySearch(nums, mid+1, right, t);
    return false;
}
bool search(vector<int>& nums, int target) {
    int i = 0;
    int n = nums.size();
    int pivot = -1;
    while(i < n-1){
        if(nums[i+1] < nums[i]){
            pivot = i+1;
            break;
        }
        i++;
    }
    if(pivot == -1){
        return binarySearch(nums,0,n-1,target);
    }
    else{
        if(nums[pivot] == target) return true;
        if(pivot+1 < n and nums[pivot+1] <= target and nums[n-1] >= target){
            return binarySearch(nums, pivot+1, n-1, target);
        }
        else if(pivot-1 >= 0 and nums[0] <= target and nums[pivot-1] >= target) {
            return binarySearch(nums, 0, pivot-1, target);
        }
        else return false;
    }
    return true;
}


Q3) https://leetcode.com/problems/longest-increasing-subsequence/

int lengthOfLIS(vector<int>& arr) {
    int n = arr.size();
    int dp[n];
    dp[0] = 1;
    int ans = 0;
    for(int i=1;i<n;i++){
        int mx = 0;
        for(int j=0;j<i;j++){
            if(arr[j]<arr[i]){
                if(dp[j]>mx) mx = dp[j];
            }
        }
        dp[i] = mx+1;
        if(dp[i]>ans) ans = dp[i];
    }
    return ans;
}

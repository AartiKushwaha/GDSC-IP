Q1) https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/

int longestSubarray(vector<int>& nums, int limit) {
        int ans = INT_MIN;
        int n = nums.size();
        int i=0, j=i;
        while(i<n and j<n){
            vector<int> v;
            for(int k=i;k<=j;k++){
                v.push_back(nums[k]);
            }
            sort(v.begin(),v.end());
            if(v[v.size()-1] - v[0] <= limit){
                ans = max(ans, j-i+1);
                j++;
            }else i++;
        }
        return ans;
    }
    
    
Q2) https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/

class Solution {
public:
    // Increment Frequency according to character
    void HelperIncrement(char curr, int &nA, int &nB, int &nC) {
        if(curr == 'a') nA++;
        if(curr == 'b') nB++;
        if(curr == 'c') nC++;
    }
    
    // Decrement Frequency according to character 
    void HelperDecrement(char curr, int &nA, int &nB, int &nC) {
        if(curr == 'a') nA--;
        if(curr == 'b') nB--;
        if(curr == 'c') nC--;  
    }
    
    int numberOfSubstrings(string s) {
        
        // Initialize Window to currently hold the first character and update its 
        // corresponding frequency
       int startptr = 0, endptr = 0;
       int nA = 0, nB = 0, nC = 0;
       HelperIncrement(s[0],nA,nB,nC);
       int total_currsum = 0;
        
       while(startptr <= endptr) {
           if(nA && nB && nC) {
               // If Current window holds satisfies the necessary conditions i.e. nA,Nb,nC >= 1
               // We add the total no.of strings having this window as its prefix 
               // Further we increment startptr(decrease window) and decrement frequency accordingly
               total_currsum += s.size() - endptr;
               HelperDecrement(s[startptr++],nA,nB,nC);
           }
           else
           {
               // This means that the current window does not contain at least 1 a,b & c
               // Thus we increase the size of sliding window rightwards
             endptr++;
             if(endptr == s.size()) break;
             HelperIncrement(s[endptr],nA,nB,nC);
           } 
       } 
        return total_currsum;
    }
};


Q3) https://leetcode.com/problems/replace-the-substring-for-balanced-string/



class Solution {
public:
    int balancedString(string s) {
                int n = s.size(), k = n/4, ans = n;
        unordered_map<char, int> cnt;
        for(int i = 0 ; i < n ; i++)
        {
            cnt[s[i]]++;
        }
        int lo = 0;
        for(int hi = 0 ; hi < n ; hi++)
        {
			cnt[s[hi]]--;  
			while(lo < n && cnt['Q'] <= k && cnt['W'] <= k && cnt['E'] <= k && cnt['R'] <= k)
			{
				ans = min(ans, hi-lo+1);
				cnt[s[lo++]]++;
			}
		}
         return ans;
    }
};

Q4) https://leetcode.com/problems/max-consecutive-ones-iii/

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int zeroCount = 0, l = 0;
        int maxLen = 0;
        for( int r = 0 ; r < A.size() ; ++r ) {
            if( A[ r ] == 0 ) ++zeroCount;
            while( zeroCount > K ) {
                if( A[ l ] == 0 ) --zeroCount;
                ++l;
            }
            maxLen = max( maxLen, r - l + 1 );
        }
        return maxLen;
    }
};

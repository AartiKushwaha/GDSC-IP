https://leetcode.com/problems/linked-list-cycle-ii/

ListNode *detectCycle(ListNode *head) {    
      if(head==nullptr)
          return nullptr;
      ListNode* slow=head;
      ListNode* fast=head;

      while(fast!=nullptr && fast->next!=nullptr)
      {
          slow=slow->next;
          fast=fast->next->next;
          if(slow==fast)
          break;
      }
      if(fast!=nullptr && fast->next!=nullptr)
      {
          slow=head;
          while(slow!=fast)
          {
          slow=slow->next;
          fast=fast->next;
          }
          return slow;
      }

      return nullptr;
  }
  
  https://leetcode.com/problems/add-two-numbers-ii/
  
  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        vector<int> nums1, nums2;
        while(l1) {
            nums1.push_back(l1->val);
            l1 = l1->next;
        }
        while(l2) {
            nums2.push_back(l2->val);
            l2 = l2->next;
        }

        int m = nums1.size(), n = nums2.size();
        int sum = 0, carry = 0;

        ListNode *head = nullptr, *p = nullptr;

        for(int i = m - 1, j = n - 1; i >= 0 || j >= 0 || carry > 0; i--, j--) {
            sum = carry;
            if(i >= 0) 
                sum += nums1[i];

            if(j >= 0)
                sum += nums2[j];

            carry = sum / 10;

            p = new ListNode(sum%10);
            p->next = head;
            head = p;
        }

        return head;
    }
    
https://leetcode.com/problems/remove-nth-node-from-end-of-list/
    
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *dummy = new ListNode(1);
        dummy->next = head;
        ListNode *fast = dummy;
        ListNode *slow = dummy;
        int cnt = 1;
        while(cnt<=n){
            fast = fast->next;
            cnt++;
        }
        while(fast->next!=NULL){
            slow = slow->next;
            fast = fast->next;
        }
        slow->next = slow->next->next;
        return dummy->next;
    }
  
  https://leetcode.com/problems/rotate-list/
  
  ListNode* rotateRight(ListNode* head, int k) {
        
        if(head==NULL || head->next==NULL || k==0) return head;
        ListNode* temp = head;
        int len = 1;
        while(temp->next){
            temp = temp->next;
            len++;
        }
        temp->next = head;
        k%=len;
        k=len-k;
        while(k--){
            temp = temp->next;
        }
        head = temp->next;
        temp->next = NULL;
        return head;
    }
